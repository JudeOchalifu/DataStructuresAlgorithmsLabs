import structure5.*;


public class Interpreter{

    private DoublyLinkedList<Token> stack = new DoublyLinkedList<Token>(); 
    private SymbolTable table = new SymbolTable(); 

    public static void main(String[] args){
	Interpreter interpreter = new Interpreter(); 
	interpreter.interpret(new Reader()); 
    }

    public Interpreter(){
	
    }

    public void interpret(Reader r){
	Token t; 
	while(r.hasNext()){
	    t = r.next(); 
	    if(t.isSymbol()&&t.getSymbol().equals("quit")){break;}
	    //process token here 
	    String result = ""; 
	    switch (t.kind())
		{
		case 1:
		    result = "number";
		    stack.addLast(t); 
		    break;
		case 2:
		    result = "bool";
		    stack.addLast(t); 
		    break;
		case 3:
		    result = "symbol";

		    if(t.getSymbol().equals("add")) add(); 
		    else if(t.getSymbol().equals("sub")) sub(); 
		    else if(t.getSymbol().equals("mul")) mul(); 
		    else if(t.getSymbol().equals("div")) div(); 
		    else if(t.getSymbol().equals("dup")) dup(); 
		    else if(t.getSymbol().equals("exch")) exch();
		    else if(t.getSymbol().equals("ne")) ne();
		    else if(t.getSymbol().equals("pstack")) pstack(); 
		    else if(t.getSymbol().equals("pop")) pop(); 
		    else if(t.getSymbol().contains("def")) def(); 
		    else if(table.contains(t.getSymbol())){
			    stack.addLast(new Token(table.get(t.getSymbol()).getNumber())); 
		    }
		    else stack.addLast(t); 
		   
		    //else System.out.println("give valid command"); 

		    

		    break;
		case 4:
		    result = "{ ";
		    break; 
		default:
		    break;
		}
	
	    //System.out.println(t); 
	}
    }

    public void add(){
	Token a = stack.removeLast(); 
	Token b = stack.removeLast(); 
	Assert.condition(a.isNumber()&&b.isNumber(),"Must use numbers"); 
	stack.addLast(new Token(a.getNumber()+b.getNumber())); 
	    
	System.out.println(stack.getLast()); 	
    }

    public void sub(){
	Token a = stack.removeLast(); 
	Token b = stack.removeLast(); 
	Assert.condition(a.isNumber()&&b.isNumber(),"Must use numbers"); 
	stack.addLast(new Token(b.getNumber()-a.getNumber())); 
	    
	System.out.println(stack.getLast()); 	
    }

    public void mul(){
	Token a = stack.removeLast(); 
	Token b = stack.removeLast(); 
	Assert.condition(a.isNumber()&&b.isNumber(),"Must use numbers"); 
	stack.addLast(new Token(a.getNumber()*b.getNumber())); 
	    
	System.out.println(stack.getLast()); 	
    }

    public void div(){
	Token a = stack.removeLast(); 
	Token b = stack.removeLast(); 
	Assert.condition(a.isNumber()&&b.isNumber(),"Must use numbers"); 
	Assert.condition(b.getNumber()!=0,"Cannot divide by 0"); 
	stack.addLast(new Token(a.getNumber()/b.getNumber())); 
	    
	System.out.println(stack.getLast()); 	
    }
    //REMOVE SYSTEM OUT PRINT LINES 

    public void dup(){
	Assert.condition(stack.getLast().isNumber(),"Must duplicate a number"); 
	stack.addLast(stack.getLast()); 
	
    }
    public void exch(){
	System.out.println(stack.getLast()); 
	Token a = stack.removeLast(); 
	Token b = stack.removeLast(); 
	Assert.condition(a.isNumber()&&b.isNumber(),"Must use ndfdumbers"); 
	stack.addLast(a); 
	stack.addLast(b); 
	System.out.println(stack.getLast()); 
    }
    public void ne(){
	Token a = stack.removeLast(); 
	Token b = stack.removeLast(); 	
	Assert.condition(a.isNumber()&&b.isNumber() || a.isBoolean()&&b.isBoolean(),"Must compare same types of object"); 
	stack.addLast( new Token( a==b ) ); 
	System.out.println(stack.getLast()); 
	
    }
    public void def(){


	

	
	Token value = stack.removeLast();

	if(value.isSymbol() && value.getSymbol().contains("}")){
	    DoublyLinkedList<Token> procedureList = new DoublyLinkedList<Token>(); 
	    value = stack.removeLast(); 
	    while(!value.getSymbol().equals("{")){
		procedureList.add( value ); 
	    }

	    value = new Token(procedureList); 
 
	}
	//System.out.println("Token: " + value.getNumber()); 
	Token symbol = stack.removeLast(); 
	Assert.condition(symbol.isSymbol(), "must name procedure def"); 
	table.add(symbol.getSymbol().substring(1),value); 

	
    }
    public void pop(){
	stack.removeLast(); 
    }
    public void pstack(){
	System.out.println(stack.toString()); 
    }
    

    //NOT DONE YET 
    public void ptable(){

    }
}


