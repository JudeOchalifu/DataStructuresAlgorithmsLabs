{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 \
1. The best solution is 20.2341130614\'85 \
\
2. 20 block around 7.3 seconds.  21 blocks is 14.9 seconds.  Based on a O(n) of n2^n simplified to 2^n.  20 blocks 2^20 and 21 blocks is 2^21 so if 20 blocks is done in t time, 21 blocks will be done in t * 2 time.  The actual time is 14.9 seconds which is roughly *2 of 7.3 seconds.  We predict a time t * 2^5 time and t*2^20 time for 40 blocks and t*2^30 for 50 blocks.  \
\
3. You would use a random number generator that generates numbers from 0 to 2^vectorSize-1.  The get method would be changed to accept a parameter "currentSubset" a double rather than the normal counter.  currentSubset would be created by the random number generator.  The SubsetIterator would then add the vector indices specified by the randomly created currentSubset number.  All of these operations would run in a while loop that would stop after the timer reaches 1 second.  }