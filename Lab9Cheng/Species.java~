
import structure5.*;
import java.io.*;
import java.util.Scanner;

/**
 * The individual creatures in the world are all representatives of
 * some species class and share certain common characteristics, such
 * as the species name and the program they execute.  Rather than copy
 * this information into each creature, this data can be recorded once
 * as part of the description for a species and then each creature can
 * simply include the appropriate species pointer as part of its
 * internal data structure.
 * <p>
 * 
 * To encapsulate all of the operations operating on a species within
 * this abstraction, this provides a constructor that will read a file
 * containing the name of the creature and its program, as described
 * in the earlier part of this assignment.  To make the folder
 * structure more manageable, the species files for each creature are
 * stored in a subfolder named Creatures.  This, creating the Species
 * for the file Hop.txt will causes the program to read in
 * "Creatures/Hop.txt".
 * 
 * <p>
 *
 * Note: The instruction addresses start at one, not zero.
 */
public class Species {
    //variables for holding the information of a given species 
    private String name, color; 
    private Vector<Instruction> instructions; 
    /**
     * Create a species for the given file.
     * @pre fileName exists in the Creature subdirectory.
     */
    public Species(String fileName)  {
	//scanner for reading information about a given speices 
	Scanner input = 
	    new Scanner(new FileStream("Creatures" + 
				       java.io.File.separator + 
				       fileName));
	//initialize vector of species instructions 
	instructions = new Vector<Instruction>(); 
	name = input.nextLine();
	color = input.nextLine(); 
	//while next line exists, get the next line and read it into a new instruction 
	while(input.hasNextLine()){

	    String instruction = input.nextLine();
	    if(instruction.indexOf('.')!=-1) break;

	    //a blank space indicates that the instruction has an address as well 
	    int space = instruction.indexOf(' '); 

	    if(space==-1){ instructions.add( new Instruction(instruction,-1));}
	    else {instructions.add( new Instruction(instruction.substring(0,space),
						    Integer.parseInt(instruction.substring(space+1))));}
	}
    }


    /**
     * Return the name of the species.
     */
    public String getName() {
	return name; 
    }

    /**
     * Return the color of the species.
     */
    public String getColor() {
	return color; 
    }

    /**
     * Return the number of instructions in the program.
     */
    public int programSize() {
	return instructions.size(); 
    }

    /**
     * Return an instruction from the program.
     * @pre  1 <= i <= programSize().
     * @post returns instruction i of the program.
     */
    public Instruction programStep(int i) {
	return instructions.get(i-1); 
    }

    /**
     * Return a String representation of the program.
     */
    public String programToString() {
	String s = "";
	for (int i = 1; i <= programSize(); i++) {
	    s = s + (i) + ": " + programStep(i) + "\n";
	}
	return s;
    }

    //testing code 
    public static void main(String s[]) {
	/*
	Species sp = new Species("Hop.txt");
	System.out.println(sp.getName());
	System.out.println("first step should be hop: " + sp.programStep(1).toString()); 
	System.out.println( sp.programStep(2).getOpcode() + " " + sp.programStep(2).getAddress()); 
	System.out.println( sp.programToString() ); 
	*/

    }

}
   
