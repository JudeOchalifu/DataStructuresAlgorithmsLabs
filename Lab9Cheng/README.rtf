{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 \
12.1 \
pre-order traversal: U T I M S D A D\
post-order traversal: M I T A D D S U  \
in-order traversal: M I T U S A D D \
\
12.20 \
\
static boolean heightBalanced(BinaryTree<E> tree)\{\
	return Math.abs( tree.right().height() - tree.left().height() ) <= 1; \
\}\
\
//assume this method is in the BinaryTree Node class \
public int getHeight()\{\
	return heightHelper( this , 1 );  \
\}\
\
//search through left and right subtrees and return the max height \
protected int heightHelper( BinaryTree<E> node, int count )\{\
	if(node==null) return count; \
	count ++; \
	return Math.max(  heightHelper(node.left()) , heightHelper(node.right()) ); \
\}}